def get_interview_prompt(role, mode, num_qs=3):
    if mode == "Technical":
        sample_qs = [
            {"q": f"What is the time complexity of binary search in {role} role?",
             "options": ["O(n)", "O(log n)", "O(n log n)", "O(1)"],
             "answer": "O(log n)"},
            {"q": f"Explain OOP concepts with examples relevant to {role}.",
             "options": ["Encapsulation", "Polymorphism", "Abstraction", "All of the above"],
             "answer": "All of the above"},
            {"q": "How would you design a scalable login system?",
             "options": ["Single DB", "Use caching + rate limit", "Store password plaintext", "Use only cookies"],
             "answer": "Use caching + rate limit"},
            {"q": "What's the difference between REST and GraphQL?",
             "options": ["REST is a protocol", "GraphQL is a spec", "Different query/response styles", "They are identical"],
             "answer": "Different query/response styles"},
            {"q": "What is the space complexity of merge sort?",
             "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"],
             "answer": "O(n)"},
            {"q": "Which SQL clause is used to filter results?",
             "options": ["WHERE", "ORDER BY", "SELECT", "GROUP BY"],
             "answer": "WHERE"},
            {"q": "Which data structure is used for BFS traversal?",
             "options": ["Stack", "Queue", "Heap", "Tree"],
             "answer": "Queue"},
            {"q": "Python is considered dynamically typed because:",
             "options": ["Type is checked at compile time", "Type is checked at runtime", "No types exist", "Only int/str supported"],
             "answer": "Type is checked at runtime"},
            {"q": "What is a foreign key in SQL?",
             "options": ["Unique identifier", "Link between tables", "Index field", "Temporary variable"],
             "answer": "Link between tables"},
            {"q": "Which ML algorithm is used for classification?",
             "options": ["Linear Regression", "K-Means", "Decision Tree", "PCA"],
             "answer": "Decision Tree"}
        ]
    else:
        sample_qs = [
            {"q": "Tell me about a time you resolved a conflict in your team.",
             "options": ["Avoided conflict", "Listened & mediated", "Ignored it", "Escalated immediately"],
             "answer": "Listened & mediated"},
            {"q": "Describe a challenging project you led.",
             "options": ["Missed deadlines", "Planned well & adapted", "Ignored feedback", "All of the above"],
             "answer": "Planned well & adapted"},
            {"q": "How do you handle feedback?",
             "options": ["Ignore", "React defensively", "Reflect & act", "Complain"],
             "answer": "Reflect & act"},
            {"q": "How do you prioritize multiple deadlines?",
             "options": ["Randomly pick", "Prioritize by impact", "Delay all", "Ask others"],
             "answer": "Prioritize by impact"},
            {"q": "What motivates you in your work?",
             "options": ["Money only", "Learning & growth", "Avoiding tasks", "Nothing"],
             "answer": "Learning & growth"},
            {"q": "How do you handle stress?",
             "options": ["Ignore it", "Healthy coping strategies", "Quit immediately", "Blame others"],
             "answer": "Healthy coping strategies"},
            {"q": "How do you collaborate in remote teams?",
             "options": ["Never communicate", "Clear async updates", "Wait for orders", "Avoid meetings"],
             "answer": "Clear async updates"},
            {"q": "What do you do if a teammate underperforms?",
             "options": ["Support & guide", "Ignore them", "Blame them", "Escalate immediately"],
             "answer": "Support & guide"},
            {"q": "How do you learn new skills?",
             "options": ["Self-study + practice", "Avoid learning", "Copy others", "Ignore updates"],
             "answer": "Self-study + practice"},
            {"q": "Tell me about a time you failed and recovered.",
             "options": ["Blame others", "Take ownership & learn", "Hide it", "Deny it"],
             "answer": "Take ownership & learn"}
        ]

    return sample_qs[:num_qs]
